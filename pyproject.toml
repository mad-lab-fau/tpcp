[tool.poetry]
name = "tpcp"
version = "0.28.0"
description = "Pipeline and Dataset helpers for complex algorithm evaluation."
authors = [
    "Arne Küderle <arne.kuederle@fau.de>",
    "Robert Richer <robert.richer@fau.de>",
    "Raul C. Sîmpetru <raul.simpetru@fau.de>",
    "Björn Eskofier <björn.eskofier@fau.de>"
]
readme = "README.md"
homepage = "https://github.com/mad-lab-fau/tpcp"
repository = "https://github.com/mad-lab-fau/tpcp"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
joblib = ">=1.3"
scikit-learn = ">=1.3"
numpy = ">=1.0"
pandas = ">=1.3"
tqdm = ">=4.62.3"
typing-extensions = ">=4.1.1"
torch = { version = ">=1.6.0", source="torch_cpu", optional = true }
tensorflow-cpu = { version = ">=2.0.0", optional = true, python = "<3.11" }
optuna = {version = ">=2.10", optional = true}
attrs = {version = ">=22.1.0", optional = true}

[tool.poetry.extras]
_torch_cpu = ["torch"]
_tensorflow = ["tensorflow-cpu"]
optuna = ["optuna"]
attrs = ["attrs"]

[tool.poetry.group.dev.dependencies]
pydata-sphinx-theme = "^0.14.1"
pytest = "^6.2.1"
pytest-cov = "^2.8.1"
poethepoet = "^0.10.0"
pyright = "^1.1.230"
numpydoc = "^1.4.0"
sphinx-gallery = "^0.14.0"
recommonmark = "^0.7.1"
memory-profiler = "^0.58.0"
matplotlib = "^3.4.3"
toml = "^0.10.2"
Sphinx = "^7.2.6"
ruff = "^0.1.8"


[[tool.poetry.source]]
name = "torch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "supplemental"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"


[tool.poe.tasks]
_format = "ruff format ."
_auto_fix = "ruff . --fix-only --exit-zero"
_auto_fix_unsafe = "ruff . --fix-only --exit-zero --unsafe-fixes"
format = ["_auto_fix", "_format"]
format_unsafe = ["_auto_fix_unsafe", "_format"]
lint = { cmd = "ruff tpcp --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff tpcp --output-format=github"
_check_format = "ruff format . --check"
ci_check = { sequence = ["_check_format", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=tpcp --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
docs = { "script" = "_tasks:task_docs()",  help = "Build the html docs using Sphinx." }
docs_clean = { "script" = "_tasks:task_docs(clean=True)",  help = "Remove all old build files and build a clean version of the docs." }
docs_preview = { cmd = "python -m http.server --directory docs/_build/html", help = "Preview the built html docs." }
version = { "script" = "_tasks:task_update_version()" }

[tool.pyright]
pythonVersion = "3.9"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

