[tool.poetry]
name = "tpcp"
version = "0.21.0"
description = "Pipeline and Dataset helpers for complex algorithm evaluation."
authors = [
    "Arne Küderle <arne.kuederle@fau.de>",
    "Robert Richer <robert.richer@fau.de>",
    "Raul C. Sîmpetru <raul.simpetru@fau.de>",
    "Björn Eskofier <björn.eskofier@fau.de>"
]
readme = "README.md"
homepage = "https://github.com/mad-lab-fau/tpcp"
repository = "https://github.com/mad-lab-fau/tpcp"

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
joblib = ">=1.3"
scikit-learn = ">=1.0"
numpy = ">=1.0"
pandas = ">=1.4"
tqdm = ">=4.62.3"
typing-extensions = ">=4.1.1"
torch = { version = ">=1.6.0", source="torch_cpu", optional = true }
optuna = {version = ">=2.10", optional = true}
attrs = {version = ">=22.1.0", optional = true}

[tool.poetry.extras]
_torch_cpu = ["torch"]
optuna = ["optuna"]
attrs = ["attrs"]

[tool.poetry.group.dev.dependencies]
pydata-sphinx-theme = "^0.13.0"
pytest = "^6.2.1"
pytest-cov = "^2.8.1"
black = "^22.3.0"
poethepoet = "^0.10.0"
pyright = "^1.1.230"
numpydoc = "^1.4.0"
sphinx-gallery = "^0.11.0"
recommonmark = "^0.7.1"
memory-profiler = "^0.58.0"
matplotlib = "^3.4.3"
toml = "^0.10.2"
Sphinx = "^6.1.3"
ruff = "^0.0.235"


[[tool.poetry.source]]
name = "torch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "supplemental"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"


[tool.black]
line-length = 120
target-version = ['py38']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''


[tool.ruff]
line-length = 120
target-version = "py38"

select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # pep8-naming
    "N",
    # flake8-blind-except
    "BLE",
    # flake8-2020
    "YTT",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-errmsg
    "EM",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # pylint
    "PL",
    # flake8-pie
    "PIE",
    # flake8-type-checking
    "TCH",
    # tryceratops
    "TRY",
    # flake8-use-pathlib
    "PTH",
    "RUF"
]

ignore = [
    # controversial
    "B006",
    # controversial
    "B008",
    "B010",
    # Magic constants
    "PLR2004",
    # Strings in error messages
    "EM101",
    "EM102",
    "EM103",
    # Multiline docstring summary
    "D213",
    # Varaibles before return
    "RET504",
    # Abstract raise into inner function
    "TRY301",
    # Use type-checking block
    "TCH001",
    "TCH002",
    "TCH003",
    # df as varaible name
    "PD901",
    # melt over stack
    "PD013"
]


exclude = [
    "doc/sphinxext/*.py",
    "doc/build/*.py",
    "doc/temp/*.py",
    ".eggs/*.py",
    "example_data",
    "examples"
]


[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.poe.tasks]
_format_black = "black ."
_format_ruff = "ruff . --fix-only --exit-zero"
format = ["_format_black", "_format_ruff", "_format_black"]
lint = { cmd = "ruff tpcp --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff tpcp --format=github"
_check_black = "black . --check"
ci_check = { sequence = ["_check_black", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=tpcp --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
docs = { "script" = "_tasks:task_docs()",  help = "Build the html docs using Sphinx." }
bump_version = { "script" = "_tasks:task_update_version()" }

[tool.pyright]
pythonVersion = "3.8"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

